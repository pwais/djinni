@extern "../../../src/djinni/jdirectarray.yaml"
@extern "../../../src/djinni/jheaparray.yaml"

#TODO
#record_with_jheaparray_and_derivings = record {
#  a: jheaparray;
#} deriving(eq, ord)
#record_with_jdirectarray_and_derivings = record {
#  da: jdirectarray;
#} deriving(eq, ord)
# TODO write tests
test_heap_array = interface + c {
  static check_null_array(a: jheaparray): bool;
  static check_array_contents(a: jheaparray, expected: binary): bool;
}

# A test object that owns a JDirectArray
test_direct_array = interface + c {

  ### Test cases

  # Special test case for null-check
  static check_null_direct_array(da: jdirectarray): bool;

  ### Instance Utils

  # Wrap the given array (and release the previously owned array implicitly)
  wrap(da: jdirectarray): bool;
  
  # Write (a *copy*) of `content` bytes into the wrapped array
  write(contents: binary): bool;
  
  # Check that the wrapped array contains `expected_contents`
  check(expected_contents: binary): bool;
  
  # Release ownership of the wrapped array (to Java); *move operation*
  takeArray(): jdirectarray;


  ### Factories

  # Create a test object that does NOT own an array
  static create(): test_direct_array;

  # Create a test object wrapping a Direct Byte Buffer
  static allocateDirect(size: i32): test_direct_array;

  # Create a test object wrapping a std::vector
  static allocateFascade(size: i32): test_direct_array;
}

